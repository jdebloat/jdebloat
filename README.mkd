# ONR TPCP Synergistic Customization Project for Java Bytecode Debloating and Delayering 

There are two options to execute this tool explained below.

## Using a VM

You can find both tools and subject programs in the VM image. You are required to install the following software, described below.

- VirtualBox 5.2.22
- vagrant 2.2.2

To setup and enter the VM, please
tun the following:

```
vagrant up
vagrant ssh
cd /vagrant
```

## Using a Linux Machine locally

You are required to install the following software, described below.

- Stack (Instructions here - https://docs.haskellstack.org/en/stable/install_and_upgrade/)
- Java
- Git
- Python

To setup, please set the JAVA\_HOME environment variable to point to the Java installation home folder (Instructions here - https://docs.oracle.com/cd/E19182-01/821-0917/inst_jdk_javahome_t/index.html)

You are also required to check out the tool and subject programs from the shared repository.

## Setup

Before running the tool, please run the following for setup in the home folder:

```
git submodule init
git submodule update
```

Some of the tools require setup. You can run the setup for all the projects with the following command:

```
./jdebloat.py setup
```

## Running the tools

The tool can be executed through the interface provided by the jdebloat.py script. 

The usage for the script can be listed with the help([-h]) option as follows.

```
./jdebloat.py -h

usage: jdebloat.py [-h] {clean,setup,run}

positional arguments:
  {clean,setup,run}

optional arguments:
  -h, --help         show this help message and exit

```

The three positional arguments available for each tool in the package:
1. Setup - to perform setup and compilation for the tool
2. Run - to execute the tool with the benchmark projects
3. Clean - to perform cleanup for the tool



Examples:
Run all 3 debloat tools in sequence.

```
./jdebloat.py setup
./jdebloat.py run
./jdebloat.py clean
```

To run the JReduce tool, run:

```
./jdebloat.py setup jreduce
./jdebloat.py run jreduce
```

To run the JShrink tool, run:

```
./jdebloat.py setup jshrink
./jdebloat.py run jshrink
```

To run the JInline tool, run:

```
./jdebloat.py setup jinline
./jdebloat.py run jinline
```

## Directory Structure

* results [Directory containing the benchmark results]
* data [Contains misc. data used by the tools]
* jdebloat.py [The script which runs jdebloat]
* output [The output directory]
* README.mkd [The setup README]
* scripts [Contains scripts used by jdebloat.py to run the tools]
* tools [Contains the JShrink, JReduce, and JInline tools]
    * javaq [Contains the javaq tool, used for data collection]
    * jinline [Contains the JInline tool]
        * README.md [The JInline tool README file]
    * jshrink [Contains the JShrink tool]
        * README.md [The JShrink README file]
    * jreduce [Contains the JReduce tool]
        * README.md [The JReduce README file]

## Benchmark Results

We tested JDebloat on 25 benchmarks and found the following reductions:

| Name                                 | Reduction |
| --                                   | ---:      |
| aragozin/jvm-tools                   |   64.20%  |
| ata4/disunity                        |   25.64%  |
| Bukkit/Bukkit                        |   66.49%  |
| eirslett/frontend-maven-plugin       |   99.99%  |
| google/gson                          |   30.05%  |
| JakeWharton/DiskLruCache             |   20.20%  |
| JakeWharton/retrofit1-okhttp3-client |   22.70%  |
| JakeWharton/RxReplayingShare         |   47.70%  |
| JCTools/JCTools                      |   90.70%  |
| junit-team/junit4                    |   20.21%  |
| kevinsawicki/http-request            |   19.80%  |
| mabe02/lanterna                      |   24.99%  |
| pagehelper/Mybatis-PageHelper        |   30.25%  |
| pedrovgs/Algorithms                  |   36.74%  |
| qiujiayu/AutoLoadCache               |   71.02%  |
| square/javapoet                      |   20.51%  |
| square/moshi                         |   99.56%  |
| takari/maven-wrapper                 |   74.45%  |
| alibaba/TProfiler                    |   97.15%  |
| dieforfree/qart4j                    |  100.00%  |
| dubboclub/dubbokeeper                |   80.09%  |
| JakeWharton/RxRelay                  |   27.80%  |
| sockeqwe/fragmentargs                |   23.73%  |
| tomighty/tomighty                    |   29.13%  |
| zeroturnaround/zt-zip                |   26.61%  |

The links to all of these repositories, as well as the commits we used, are
listed in `data/benchmarks.csv`.
